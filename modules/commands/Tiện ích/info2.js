const axios = require("axios");
const downloader = require("image-downloader");
const fs = require("fs");
const fse = require('fs-extra');
const path = require("path");
const moment = require("moment-timezone");

module.exports.config = {
    name: "info2",
    version: "0.0.5",
    hasPermssion: 0,
    credits: "L∆∞∆°ng Tr∆∞·ªùng Kh√¥i & AI",
    description: "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ Facebook",
    usages: "[uid|link|reply]",
    commandCategory: "Ti·ªán √≠ch",
    cooldowns: 5,
};

async function streamURL(url, mime = 'jpg') {
    const dest = `${__dirname}/cache/${Date.now()}.${mime}`;
    await downloader.image({ url, dest });
    setTimeout(() => fse.unlinkSync(dest), 60 * 1000); // X√≥a file sau 1 ph√∫t
    return fse.createReadStream(dest);
}

async function getUidFromLink(link) {
    try {
        const response = await axios.get(`https://ffb.vn/api/tool/get-id-fb?idfb=${encodeURIComponent(link)}`);
        return response.data.id || null;
    } catch (error) {
        console.error("Error fetching UID from link:", error);
        return null;
    }
}

module.exports.run = async function({ api, event, args }) {
    let uid = args[0];

    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng reply tin nh·∫Øn
    if (event.messageReply) {
        uid = event.messageReply.senderID;
    } else if (uid && uid.startsWith("http")) {
        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng g·ª≠i link v√† l·∫•y UID t·ª´ link
        uid = await getUidFromLink(uid);
    } else if (!uid) {
        // N·∫øu UID tr·ªëng th√¨ s·ª≠ d·ª•ng UID c·ªßa ng∆∞·ªùi s·ª≠ d·ª•ng l·ªánh
        uid = event.senderID;
    }

    if (!uid) {
        return api.sendMessage("Vui l√≤ng cung c·∫•p UID, li√™n k·∫øt ng∆∞·ªùi d√πng h·ª£p l·ªá ho·∫∑c reply tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng!", event.threadID, event.messageID);
    }

    try {
        api.sendMessage("üîÑ ƒêang l·∫•y th√¥ng tin...", event.threadID, event.messageID);

        // G·ª≠i y√™u c·∫ßu ƒë·∫øn hai API c√πng l√∫c
        const [response1, response2] = await Promise.all([
            axios.get(`https://lechii.onrender.com/facebook/getinfo?uid=${uid}`),
            axios.get(`https://lechii.onrender.com/facebook/getinfov2?uid=${uid}`)
        ]);

        const result1 = response1.data;
        const result2 = response2.data;

        // H√†m ki·ªÉm tra v√† l·∫•y d·ªØ li·ªáu t·ª´ API 1, n·∫øu kh√¥ng c√≥ th√¨ l·∫•y t·ª´ API 2
        const getData = (data1, data2, field) => {
            return data1 && data1[field] && data1[field] !== "Kh√¥ng c√≥ d·ªØ li·ªáu!" ? data1[field] : (data2 && data2[field] ? data2[field] : "‚ùå");
        };

        // L·∫•y c√°c th√¥ng tin t·ª´ API 1 v√† API 2
		const user_id = result2.id
        const name = getData(result1, result2, 'name');
        const firstName = getData(result1, result2, 'first_name');
        const profileUrl = getData(result1, result2, 'link');
        const gender = getData(result1, result2, 'gender');
        const locale = getData(result1, result2, 'locale');
        const subscribers = getData(result1, result2, 'subscribers') && getData(result1, result2, 'subscribers').summary ? getData(result1, result2, 'subscribers').summary.total_count : "‚ùå";
        const timezone = getData(result1, result2, 'timezone');
        const username = getData(result1, result2, 'username');
        const coverPhotoUrl = getData(result1, result2, 'cover') ? getData(result1, result2, 'cover').source : null;
        const createdTime = moment.tz(result2.created_time, "Asia/Ho_Chi_Minh").format("DD/MM/YYYY HH:mm:ss"); // ƒê·ªãnh d·∫°ng theo m√∫i gi·ªù Vi·ªát Nam
        const updatedTime = getData(result1, result2, 'updated_time') ? moment(getData(result1, result2, 'updated_time')).tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY HH:mm:ss") : "‚ùå";
        let relationshipStatus = getData(result1, result2, 'relationship_status');
        const birthday = getData(result1, result2, 'birthday');
        const hometown = typeof getData(result1, result2, 'hometown') === 'object' ? getData(result1, result2, 'hometown').name : getData(result1, result2, 'hometown');
        const location = typeof getData(result1, result2, 'location') === 'object' ? getData(result1, result2, 'location').name : getData(result1, result2, 'location');
        const about = getData(result1, result2, 'about');
        const quotes = getData(result1, result2, 'quotes');
        const verify = result2.is_verified === true ? "ƒê√£ x√°c minh" : "Ch∆∞a x√°c minh";
        const work = getData(result1, result2, 'work');
        const love = getData(result2, result1, 'love');

        // Ki·ªÉm tra v√† th√™m "v·ªõi" n·∫øu c·∫ßn thi·∫øt
        if (love && love.name !== '‚ùå') {
            relationshipStatus += ` v·ªõi ${love.name}`;
        }

        // T√¨m b√†i vi·∫øt g·∫ßn nh·∫•t t·ª´ API getinfov2
        const posts2 = result2.posts ? result2.posts.data : [];
        let latestPost = null;
        if (posts2.length > 0) {
            latestPost = posts2.reduce((latest, post) => {
                return !latest || new Date(post.created_time) > new Date(latest.created_time) ? post : latest;
            }, null);
        }

        // ƒê·ªãnh d·∫°ng tin nh·∫Øn
        let message = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ì
‚îÇ üë§ H·ªç t√™n: ${name}
‚îÇ üë§ T√™n: ${firstName}
‚îÇ üîó User name: ${username} (${user_id})
‚îÇ üåê Link profile: ${profileUrl}
‚îÇ üß¨ Gi·ªõi t√≠nh: ${gender}
‚îÇ üåç Ng√¥n ng·ªØ: ${locale}
‚îÇ üïí M√∫i gi·ªù: ${timezone}
‚îÇ üìä S·ªë ng∆∞·ªùi theo d√µi: ${subscribers}
‚îÇ üéâ T·∫°o l√∫c: ${createdTime}
‚îÇ ‚è∞ C·∫≠p nh·∫≠t l√∫c: ${updatedTime}
‚îÇ üíñ Tr·∫°ng th√°i quan h·ªá: ${relationshipStatus}`;

        if (love && love.id) {
            message += `\n‚îÇ üíû Link ng∆∞·ªùi set: fb.com/${love.id}`;
        }

        message += `
‚îÇ üéÇ Ng√†y sinh: ${birthday}
‚îÇ üìç Qu√™ qu√°n: ${hometown}
‚îÇ üåç N∆°i ·ªü: ${location}
‚îÇ üìù Gi·ªõi thi·ªáu b·∫£n th√¢n: ${about}
‚îÇ üìå Tr√≠ch d·∫´n y√™u th√≠ch: ${quotes}
‚îÇ ‚úÖ X√°c minh: ${verify}
‚îÇ üíº C√¥ng vi·ªác:
${Array.isArray(work) ? work.map(w => `‚îÇ - ${w.position ? w.position.name : '‚ùå'} t·∫°i ${w.employer ? w.employer.name : '‚ùå'}, ${w.location ? w.location.name : '‚ùå'}, t·ª´ ${w.start_date ? moment(w.start_date).format("DD/MM/YYYY") : '‚ùå'}`).join('\n') : '‚ùå'}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ì`;

        // L·∫•y th√¥ng tin b√†i vi·∫øt g·∫ßn nh·∫•t (n·∫øu c√≥)
        if (latestPost) {
            const postTime = latestPost.created_time ? moment(latestPost.created_time).tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY HH:mm:ss") : "‚ùå";
            const postMessage = latestPost.message || "‚ùå";
            const postStory = latestPost.story || "‚ùå";
            const postLink = latestPost.link || "‚ùå";

            message += `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ì
‚îÇ üìÖ B√†i vi·∫øt g·∫ßn nh·∫•t:
‚îÇ üïí Th·ªùi gian: ${postTime}
‚îÇ üìù N·ªôi dung: ${postMessage}
‚îÇ üìñ C√¢u chuy·ªán: ${postStory}
‚îÇ üîó Link: ${postLink}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ì`;
        }

        // T·∫£i ·∫£nh ƒë·∫°i di·ªán v√† ·∫£nh b√¨a xu·ªëng
        const userImage = await streamURL(`https://graph.facebook.com/${uid}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`);
        let coverImage = null;
        if (coverPhotoUrl) {
            coverImage = await streamURL(coverPhotoUrl);
        }

        // G·ª≠i tin nh·∫Øn v·ªõi file ƒë√≠nh k√®m
        const attachments = coverImage ? [userImage, coverImage] : [userImage];
        api.sendMessage(
            {
                body: message,
                attachment: attachments,
            },
            event.threadID,
            (err, info) => {
                if (!err) {
                    // T·ª± ƒë·ªông x√≥a tin nh·∫Øn sau 60 gi√¢y
                    setTimeout(() => {
                        api.unsendMessage(info.messageID);
                    }, 60 * 1000);

                    fs.unlinkSync(userImage.path); // X√≥a file ·∫£nh ƒë·∫°i di·ªán sau khi g·ª≠i
                    if (coverImage) fs.unlinkSync(coverImage.path); // X√≥a file ·∫£nh b√¨a sau khi g·ª≠i n·∫øu c√≥
                }
            },
            event.messageID
        );
    } catch (error) {
        console.error(error);
        return api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin!", event.threadID, event.messageID);
    }
};